package gsrpc

import (
	"bytes"
	"github.com/centrifuge/go-substrate-rpc-client/client"
	"github.com/centrifuge/go-substrate-rpc-client/scale"
	"github.com/centrifuge/go-substrate-rpc-client/types"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

type State struct {
	client client.Client
}

func NewStateRPC(client client.Client) *State {
	return &State{client: client}
}

func (s *State) MetaData(blockHash Hash) (*types.Metadata, error) { //nolint:interfacer
	var res string
	// block hash can give error - Error(Client(UnknownBlock("State already discarded for Hash(0xxxx)")), State { next_error: None, backtrace: InternalBacktrace { backtrace: None } })
	var err error
	if blockHash == nil {
		err = s.client.Call(&res, "state_getMetadata")
	} else {
		err = s.client.Call(&res, "state_getMetadata", blockHash.String())
	}
	if err != nil {
		return nil, err
	}

	b, err := hexutil.Decode(res)
	if err != nil {
		return nil, err
	}

	dec := scale.NewDecoder(bytes.NewReader(b))
	n := types.NewMetadata()
	err = dec.Decode(n)
	if err != nil {
		return nil, err
	}

	return n, nil
}
