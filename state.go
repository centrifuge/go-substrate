package substrate

import (
	"bytes"
	"strings"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/centrifuge/go-substrate-rpc-client/scale"
)

// MethodIDX [sectionIndex, methodIndex] 16bits
type MethodIDX struct {
	SectionIndex uint8
	MethodIndex uint8
}

func (e *MethodIDX) Decode(decoder scale.Decoder) error {
	decoder.Decode(&e.SectionIndex)
	decoder.Decode(&e.MethodIndex)
	return nil
}

func (m MethodIDX) Encode(encoder scale.Encoder) error {
	encoder.Encode(m.SectionIndex)
	encoder.Encode(m.MethodIndex)
	return nil
}

type MetadataV4 struct {
	Modules []ModuleMetaData
}

func (m *MetadataV4) MethodIndex(method string) MethodIDX {
	s := strings.Split(method, ".")
	var sIDX, mIDX uint8 = 0, 0
	// section index
	var sCounter = 0

	for _, n := range m.Modules {
		if n.CallsOptional == 1 {
			if n.Name == s[0] {
				sIDX = uint8(sCounter)
				for j, f := range n.Calls {
					if f.Name == s[1] {
						mIDX = uint8(j)
					}
				}
			}
			sCounter++
		}
	}

	return MethodIDX{sIDX, mIDX}
}

func (m *MetadataV4) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Modules)
	return nil
}

type FunctionArgumentMetadata struct {
	Name string
	Type string
}

func (m *FunctionArgumentMetadata) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Name)
	decoder.Decode(&m.Type)
	return nil
}

type FunctionMetaData struct {
	Name string
	Args []FunctionArgumentMetadata
	Documentation []string
}

func (m *FunctionMetaData) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Name)
	decoder.Decode(&m.Args)
	decoder.Decode(&m.Documentation)
	return nil
}

type EventMetadata struct {
	Name string
	Args []string
	Documentation []string
}

func (m *EventMetadata) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Name)
	decoder.Decode(&m.Args)
	decoder.Decode(&m.Documentation)
	return nil
}

/**
[{"name":"AccountNonce","modifier":"Default","type":{"MapType":{"hasher":"Blake2_256","key":"AccountId","value":"Index","isLinked":false}},"fallback":"0x0000000000000000","documentation":[" Extrinsics nonce for accounts."]},{"name":"ExtrinsicCount","modifier":"Optional","type":{"PlainType":"u32"},"fallback":"0x00","documentation":[" Total extrinsics count for the current block."]},{"name":"AllExtrinsicsLen","modifier":"Optional","type":{"PlainType":"u32"},"fallback":"0x00","documentation":[" Total length in bytes for all extrinsics put together, for the current block."]},{"name":"BlockHash","modifier":"Default","type":{"MapType":{"hasher":"Blake2_256","key":"BlockNumber","value":"Hash","isLinked":false}},"fallback":"0x0000000000000000000000000000000000000000000000000000000000000000","documentation":[" Map of block numbers to block hashes."]},{"name":"ExtrinsicData","modifier":"Default","type":{"MapType":{"hasher":"Blake2_256","key":"u32","value":"Bytes","isLinked":false}},"fallback":"0x00","documentation":[" Extrinsics data for the current block (maps extrinsic's index to its data)."]},{"name":"RandomSeed","modifier":"Default","type":{"PlainType":"Hash"},"fallback":"0x0000000000000000000000000000000000000000000000000000000000000000","documentation":[" Random seed of the current block."]},{"name":"Number","modifier":"Default","type":{"PlainType":"BlockNumber"},"fallback":"0x0000000000000000","documentation":[" The current block number being processed. Set by `execute_block`."]},{"name":"ParentHash","modifier":"Default","type":{"PlainType":"Hash"},"fallback":"0x0000000000000000000000000000000000000000000000000000000000000000","documentation":[" Hash of the previous block."]},{"name":"ExtrinsicsRoot","modifier":"Default","type":{"PlainType":"Hash"},"fallback":"0x0000000000000000000000000000000000000000000000000000000000000000","documentation":[" Extrinsics root of the current block, also part of the block header."]},{"name":"Digest","modifier":"Default","type":{"PlainType":"Digest"},"fallback":"0x00","documentation":[" Digest of the current block, also part of the block header."]},{"name":"Events","modifier":"Default","type":{"PlainType":"Vec<EventRecord>"},"fallback":"0x00","documentation":[" Events deposited for the current block."]}]
 */

type TypMap struct {
	Hasher uint8
	Key string
	Value string
	IsLinked bool
}

func (m *TypMap) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Hasher)
	decoder.Decode(&m.Key)
	decoder.Decode(&m.Value)
	decoder.Decode(&m.IsLinked)
	return nil
}

type TypDoubleMap struct {
	Hasher uint8
	Key string
	Key2 string
	Value string
	Key2Hasher string
}

func (m *TypDoubleMap) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Hasher)
	decoder.Decode(&m.Key)
	decoder.Decode(&m.Key2)
	decoder.Decode(&m.Value)
	decoder.Decode(&m.Key2Hasher)
	return nil
}

type StorageFunctionMetadata struct {
	Name string
	Modifier uint8
	Type uint8
	Plane string
	Map TypMap
	DMap TypDoubleMap
	Fallback []byte
	Documentation []string
}

func (m *StorageFunctionMetadata) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Name)
	decoder.Decode(&m.Modifier)
	decoder.Decode(&m.Type)
	switch m.Type {
	case 0:
		decoder.Decode(&m.Plane)
	case 1:
		decoder.Decode(&m.Map)
	default:
		decoder.Decode(&m.DMap)
	}
	decoder.Decode(&m.Fallback)
	decoder.Decode(&m.Documentation)
	// fmt.Println(m.Documentation)
	return nil
}

type ModuleMetaData struct {
	Name string
	Prefix string
	StorageOptional uint8
	Storage []StorageFunctionMetadata
	CallsOptional uint8
	Calls []FunctionMetaData
	EventsOptional uint8
	Events []EventMetadata
}

func (m *ModuleMetaData) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.Name)
	decoder.Decode(&m.Prefix)

	decoder.Decode(&m.StorageOptional)
	if m.StorageOptional == 1 {
		decoder.Decode(&m.Storage)
	}

	decoder.Decode(&m.CallsOptional)
	if m.CallsOptional == 1 {
		decoder.Decode(&m.Calls)
	}

	decoder.Decode(&m.EventsOptional)
	if m.EventsOptional == 1 {
		decoder.Decode(&m.Events)
		// fmt.Println(m.Events)
	}
	return nil
}

// MetadataVersioned only supports v4
type MetadataVersioned struct {
	// 1635018093
	MagicNumber   uint32
	Version       uint8
	Metadata      MetadataV4
}

func NewMetadataVersioned() *MetadataVersioned {
	return &MetadataVersioned{Metadata:MetadataV4{make([]ModuleMetaData, 0)}}
}

func (m *MetadataVersioned) Decode(decoder scale.Decoder) error {
	decoder.Decode(&m.MagicNumber)
	// we need to decide which struct to use based on the following number(enum), for now its hardcoded
	decoder.Decode(&m.Version)
	decoder.Decode(&m.Metadata)
	return nil
}

type State struct {
	nonetwork bool
	client Client
} 

func NewStateRPC(client Client) *State {
	return &State{client:client}
}

func (s *State) MetaData(blockHash Hash) (*MetadataVersioned, error) {
	// "0xd133045f0efad58582772cbdb6f5f0cd6af7bb4bf1f30d039a4b18b4bdaf4901"
	var res string
	if !s.nonetwork {
		// block hash can give error - Error(Client(UnknownBlock("State already discarded for Hash(0xxxx)")), State { next_error: None, backtrace: InternalBacktrace { backtrace: None } })
		err := s.client.Call(&res, "state_getMetadata", blockHash.String())
		if err != nil {
			return nil, err
		}
	} else {
		// just for testing
		res = ""
	}

	b, err := hexutil.Decode(res)
	if err != nil {
		return nil, err
	}

	dec := scale.NewDecoder(bytes.NewReader(b))
	n := NewMetadataVersioned()
	dec.Decode(n)
	return n, nil
}

// Keys state_getKeys
func (s *State) Keys(blockHash Hash) (*MetadataVersioned, error) {
	var res string
	if !s.nonetwork {
		err := s.client.Call(&res, "state_getKeys", blockHash.String())
		if err != nil {
			return nil, err
		}
	}
	return nil, nil
}