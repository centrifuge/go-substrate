// Go Substrate RPC Client (GSRPC) provides APIs and types around Polkadot and any Substrate-based chain RPC calls
//
// Copyright 2019 Centrifuge GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"testing"

	rpc "github.com/centrifuge/go-substrate-rpc-client/v4/gethrpc"

	"github.com/centrifuge/go-substrate-rpc-client/v4/rpc/state"

	"github.com/centrifuge/go-substrate-rpc-client/v4/rpc/chain"
	"github.com/centrifuge/go-substrate-rpc-client/v4/types"
	"github.com/stretchr/testify/mock"
)

// ChainMock is an autogenerated mock type for the Chain type
type ChainMock struct {
	mock.Mock
}

// GetBlock provides a mock function with given fields: blockHash
func (_m *ChainMock) GetBlock(blockHash types.Hash) (*types.SignedBlock, error) {
	ret := _m.Called(blockHash)

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func(types.Hash) *types.SignedBlock); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHash provides a mock function with given fields: blockNumber
func (_m *ChainMock) GetBlockHash(blockNumber uint64) (types.Hash, error) {
	ret := _m.Called(blockNumber)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(uint64) types.Hash); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHashLatest provides a mock function with given fields:
func (_m *ChainMock) GetBlockHashLatest() (types.Hash, error) {
	ret := _m.Called()

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func() types.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockLatest provides a mock function with given fields:
func (_m *ChainMock) GetBlockLatest() (*types.SignedBlock, error) {
	ret := _m.Called()

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func() *types.SignedBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFinalizedHead provides a mock function with given fields:
func (_m *ChainMock) GetFinalizedHead() (types.Hash, error) {
	ret := _m.Called()

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func() types.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeader provides a mock function with given fields: blockHash
func (_m *ChainMock) GetHeader(blockHash types.Hash) (*types.Header, error) {
	ret := _m.Called(blockHash)

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func(types.Hash) *types.Header); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeaderLatest provides a mock function with given fields:
func (_m *ChainMock) GetHeaderLatest() (*types.Header, error) {
	ret := _m.Called()

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func() *types.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeFinalizedHeads provides a mock function with given fields:
func (_m *ChainMock) SubscribeFinalizedHeads() (*chain.FinalizedHeadsSubscription, error) {
	ret := _m.Called()

	var r0 *chain.FinalizedHeadsSubscription
	if rf, ok := ret.Get(0).(func() *chain.FinalizedHeadsSubscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.FinalizedHeadsSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeNewHeads provides a mock function with given fields:
func (_m *ChainMock) SubscribeNewHeads() (*chain.NewHeadsSubscription, error) {
	ret := _m.Called()

	var r0 *chain.NewHeadsSubscription
	if rf, ok := ret.Get(0).(func() *chain.NewHeadsSubscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.NewHeadsSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChainMock creates a new instance of ChainMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainMock(t testing.TB) *ChainMock {
	mock := &ChainMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

type StateMock struct {
	mock.Mock
}

// GetChildKeys provides a mock function with given fields: childStorageKey, prefix, blockHash
func (_m *StateMock) GetChildKeys(childStorageKey types.StorageKey, prefix types.StorageKey, blockHash types.Hash) ([]types.StorageKey, error) {
	ret := _m.Called(childStorageKey, prefix, blockHash)

	var r0 []types.StorageKey
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, types.Hash) []types.StorageKey); ok {
		r0 = rf(childStorageKey, prefix, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, types.Hash) error); ok {
		r1 = rf(childStorageKey, prefix, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildKeysLatest provides a mock function with given fields: childStorageKey, prefix
func (_m *StateMock) GetChildKeysLatest(childStorageKey types.StorageKey, prefix types.StorageKey) ([]types.StorageKey, error) {
	ret := _m.Called(childStorageKey, prefix)

	var r0 []types.StorageKey
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey) []types.StorageKey); ok {
		r0 = rf(childStorageKey, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey) error); ok {
		r1 = rf(childStorageKey, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorage provides a mock function with given fields: childStorageKey, key, target, blockHash
func (_m *StateMock) GetChildStorage(childStorageKey types.StorageKey, key types.StorageKey, target interface{}, blockHash types.Hash) (bool, error) {
	ret := _m.Called(childStorageKey, key, target, blockHash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, interface{}, types.Hash) bool); ok {
		r0 = rf(childStorageKey, key, target, blockHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, interface{}, types.Hash) error); ok {
		r1 = rf(childStorageKey, key, target, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageHash provides a mock function with given fields: childStorageKey, key, blockHash
func (_m *StateMock) GetChildStorageHash(childStorageKey types.StorageKey, key types.StorageKey, blockHash types.Hash) (types.Hash, error) {
	ret := _m.Called(childStorageKey, key, blockHash)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, types.Hash) types.Hash); ok {
		r0 = rf(childStorageKey, key, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, types.Hash) error); ok {
		r1 = rf(childStorageKey, key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageHashLatest provides a mock function with given fields: childStorageKey, key
func (_m *StateMock) GetChildStorageHashLatest(childStorageKey types.StorageKey, key types.StorageKey) (types.Hash, error) {
	ret := _m.Called(childStorageKey, key)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey) types.Hash); ok {
		r0 = rf(childStorageKey, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey) error); ok {
		r1 = rf(childStorageKey, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageLatest provides a mock function with given fields: childStorageKey, key, target
func (_m *StateMock) GetChildStorageLatest(childStorageKey types.StorageKey, key types.StorageKey, target interface{}) (bool, error) {
	ret := _m.Called(childStorageKey, key, target)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, interface{}) bool); ok {
		r0 = rf(childStorageKey, key, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, interface{}) error); ok {
		r1 = rf(childStorageKey, key, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageRaw provides a mock function with given fields: childStorageKey, key, blockHash
func (_m *StateMock) GetChildStorageRaw(childStorageKey types.StorageKey, key types.StorageKey, blockHash types.Hash) (*types.StorageDataRaw, error) {
	ret := _m.Called(childStorageKey, key, blockHash)

	var r0 *types.StorageDataRaw
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, types.Hash) *types.StorageDataRaw); ok {
		r0 = rf(childStorageKey, key, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StorageDataRaw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, types.Hash) error); ok {
		r1 = rf(childStorageKey, key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageRawLatest provides a mock function with given fields: childStorageKey, key
func (_m *StateMock) GetChildStorageRawLatest(childStorageKey types.StorageKey, key types.StorageKey) (*types.StorageDataRaw, error) {
	ret := _m.Called(childStorageKey, key)

	var r0 *types.StorageDataRaw
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey) *types.StorageDataRaw); ok {
		r0 = rf(childStorageKey, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StorageDataRaw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey) error); ok {
		r1 = rf(childStorageKey, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageSize provides a mock function with given fields: childStorageKey, key, blockHash
func (_m *StateMock) GetChildStorageSize(childStorageKey types.StorageKey, key types.StorageKey, blockHash types.Hash) (types.U64, error) {
	ret := _m.Called(childStorageKey, key, blockHash)

	var r0 types.U64
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey, types.Hash) types.U64); ok {
		r0 = rf(childStorageKey, key, blockHash)
	} else {
		r0 = ret.Get(0).(types.U64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey, types.Hash) error); ok {
		r1 = rf(childStorageKey, key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildStorageSizeLatest provides a mock function with given fields: childStorageKey, key
func (_m *StateMock) GetChildStorageSizeLatest(childStorageKey types.StorageKey, key types.StorageKey) (types.U64, error) {
	ret := _m.Called(childStorageKey, key)

	var r0 types.U64
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.StorageKey) types.U64); ok {
		r0 = rf(childStorageKey, key)
	} else {
		r0 = ret.Get(0).(types.U64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.StorageKey) error); ok {
		r1 = rf(childStorageKey, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeys provides a mock function with given fields: prefix, blockHash
func (_m *StateMock) GetKeys(prefix types.StorageKey, blockHash types.Hash) ([]types.StorageKey, error) {
	ret := _m.Called(prefix, blockHash)

	var r0 []types.StorageKey
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.Hash) []types.StorageKey); ok {
		r0 = rf(prefix, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.Hash) error); ok {
		r1 = rf(prefix, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeysLatest provides a mock function with given fields: prefix
func (_m *StateMock) GetKeysLatest(prefix types.StorageKey) ([]types.StorageKey, error) {
	ret := _m.Called(prefix)

	var r0 []types.StorageKey
	if rf, ok := ret.Get(0).(func(types.StorageKey) []types.StorageKey); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: blockHash
func (_m *StateMock) GetMetadata(blockHash types.Hash) (*types.Metadata, error) {
	ret := _m.Called(blockHash)

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func(types.Hash) *types.Metadata); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataLatest provides a mock function with given fields:
func (_m *StateMock) GetMetadataLatest() (*types.Metadata, error) {
	ret := _m.Called()

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func() *types.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeVersion provides a mock function with given fields: blockHash
func (_m *StateMock) GetRuntimeVersion(blockHash types.Hash) (*types.RuntimeVersion, error) {
	ret := _m.Called(blockHash)

	var r0 *types.RuntimeVersion
	if rf, ok := ret.Get(0).(func(types.Hash) *types.RuntimeVersion); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RuntimeVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeVersionLatest provides a mock function with given fields:
func (_m *StateMock) GetRuntimeVersionLatest() (*types.RuntimeVersion, error) {
	ret := _m.Called()

	var r0 *types.RuntimeVersion
	if rf, ok := ret.Get(0).(func() *types.RuntimeVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RuntimeVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorage provides a mock function with given fields: key, target, blockHash
func (_m *StateMock) GetStorage(key types.StorageKey, target interface{}, blockHash types.Hash) (bool, error) {
	ret := _m.Called(key, target, blockHash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}, types.Hash) bool); ok {
		r0 = rf(key, target, blockHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, interface{}, types.Hash) error); ok {
		r1 = rf(key, target, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageHash provides a mock function with given fields: key, blockHash
func (_m *StateMock) GetStorageHash(key types.StorageKey, blockHash types.Hash) (types.Hash, error) {
	ret := _m.Called(key, blockHash)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.Hash) types.Hash); ok {
		r0 = rf(key, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.Hash) error); ok {
		r1 = rf(key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageHashLatest provides a mock function with given fields: key
func (_m *StateMock) GetStorageHashLatest(key types.StorageKey) (types.Hash, error) {
	ret := _m.Called(key)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(types.StorageKey) types.Hash); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLatest provides a mock function with given fields: key, target
func (_m *StateMock) GetStorageLatest(key types.StorageKey, target interface{}) (bool, error) {
	ret := _m.Called(key, target)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}) bool); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, interface{}) error); ok {
		r1 = rf(key, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageRaw provides a mock function with given fields: key, blockHash
func (_m *StateMock) GetStorageRaw(key types.StorageKey, blockHash types.Hash) (*types.StorageDataRaw, error) {
	ret := _m.Called(key, blockHash)

	var r0 *types.StorageDataRaw
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.Hash) *types.StorageDataRaw); ok {
		r0 = rf(key, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StorageDataRaw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.Hash) error); ok {
		r1 = rf(key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageRawLatest provides a mock function with given fields: key
func (_m *StateMock) GetStorageRawLatest(key types.StorageKey) (*types.StorageDataRaw, error) {
	ret := _m.Called(key)

	var r0 *types.StorageDataRaw
	if rf, ok := ret.Get(0).(func(types.StorageKey) *types.StorageDataRaw); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StorageDataRaw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageSize provides a mock function with given fields: key, blockHash
func (_m *StateMock) GetStorageSize(key types.StorageKey, blockHash types.Hash) (types.U64, error) {
	ret := _m.Called(key, blockHash)

	var r0 types.U64
	if rf, ok := ret.Get(0).(func(types.StorageKey, types.Hash) types.U64); ok {
		r0 = rf(key, blockHash)
	} else {
		r0 = ret.Get(0).(types.U64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, types.Hash) error); ok {
		r1 = rf(key, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageSizeLatest provides a mock function with given fields: key
func (_m *StateMock) GetStorageSizeLatest(key types.StorageKey) (types.U64, error) {
	ret := _m.Called(key)

	var r0 types.U64
	if rf, ok := ret.Get(0).(func(types.StorageKey) types.U64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(types.U64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryStorage provides a mock function with given fields: keys, startBlock, block
func (_m *StateMock) QueryStorage(keys []types.StorageKey, startBlock types.Hash, block types.Hash) ([]types.StorageChangeSet, error) {
	ret := _m.Called(keys, startBlock, block)

	var r0 []types.StorageChangeSet
	if rf, ok := ret.Get(0).(func([]types.StorageKey, types.Hash, types.Hash) []types.StorageChangeSet); ok {
		r0 = rf(keys, startBlock, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageChangeSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.StorageKey, types.Hash, types.Hash) error); ok {
		r1 = rf(keys, startBlock, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryStorageLatest provides a mock function with given fields: keys, startBlock
func (_m *StateMock) QueryStorageLatest(keys []types.StorageKey, startBlock types.Hash) ([]types.StorageChangeSet, error) {
	ret := _m.Called(keys, startBlock)

	var r0 []types.StorageChangeSet
	if rf, ok := ret.Get(0).(func([]types.StorageKey, types.Hash) []types.StorageChangeSet); ok {
		r0 = rf(keys, startBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.StorageChangeSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.StorageKey, types.Hash) error); ok {
		r1 = rf(keys, startBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeRuntimeVersion provides a mock function with given fields:
func (_m *StateMock) SubscribeRuntimeVersion() (*state.RuntimeVersionSubscription, error) {
	ret := _m.Called()

	var r0 *state.RuntimeVersionSubscription
	if rf, ok := ret.Get(0).(func() *state.RuntimeVersionSubscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.RuntimeVersionSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeStorageRaw provides a mock function with given fields: keys
func (_m *StateMock) SubscribeStorageRaw(keys []types.StorageKey) (*state.StorageSubscription, error) {
	ret := _m.Called(keys)

	var r0 *state.StorageSubscription
	if rf, ok := ret.Get(0).(func([]types.StorageKey) *state.StorageSubscription); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.StorageSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.StorageKey) error); ok {
		r1 = rf(keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStateMock creates a new instance of StateMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateMock(t testing.TB) *StateMock {
	mock := &StateMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

type ClientMock struct {
	mock.Mock
}

// Call provides a mock function with given fields: result, method, args
func (_m *ClientMock) Call(result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, namespace, subscribeMethodSuffix, unsubscribeMethodSuffix, notificationMethodSuffix, channel, args
func (_m *ClientMock) Subscribe(ctx context.Context, namespace string, subscribeMethodSuffix string, unsubscribeMethodSuffix string, notificationMethodSuffix string, channel interface{}, args ...interface{}) (*rpc.ClientSubscription, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, namespace, subscribeMethodSuffix, unsubscribeMethodSuffix, notificationMethodSuffix, channel)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *rpc.ClientSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, interface{}, ...interface{}) *rpc.ClientSubscription); ok {
		r0 = rf(ctx, namespace, subscribeMethodSuffix, unsubscribeMethodSuffix, notificationMethodSuffix, channel, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.ClientSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, interface{}, ...interface{}) error); ok {
		r1 = rf(ctx, namespace, subscribeMethodSuffix, unsubscribeMethodSuffix, notificationMethodSuffix, channel, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URL provides a mock function with given fields:
func (_m *ClientMock) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewClientMock creates a new instance of ClientMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientMock(t testing.TB) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
